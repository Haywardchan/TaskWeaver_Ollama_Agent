"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[679],{3606:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var i=n(5893),a=n(1151);const o={id:"multi_yaml_single_impl",description:"Multiple YAML files to one Python implementation",slug:"/plugin/multi_yaml_single_impl"},s="Multiple YAML files to one Python implementation",l={id:"customization/plugin/multi_yaml_single_impl",title:"Multiple YAML files to one Python implementation",description:"Multiple YAML files to one Python implementation",source:"@site/docs/customization/plugin/multi_yaml_single_impl.md",sourceDirName:"customization/plugin",slug:"/plugin/multi_yaml_single_impl",permalink:"/TaskWeaver/docs/plugin/multi_yaml_single_impl",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/TaskWeaver/tree/main/website/docs/customization/plugin/multi_yaml_single_impl.md",tags:[],version:"current",frontMatter:{id:"multi_yaml_single_impl",description:"Multiple YAML files to one Python implementation",slug:"/plugin/multi_yaml_single_impl"},sidebar:"documentSidebar",previous:{title:"An Example of Developing a New Plugin",permalink:"/TaskWeaver/docs/plugin/how_to_develop_a_new_plugin"},next:{title:"Customizing Examples",permalink:"/TaskWeaver/docs/customization/example/"}},r={},d=[{value:"Conclusion",id:"conclusion",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"multiple-yaml-files-to-one-python-implementation",children:"Multiple YAML files to one Python implementation"}),"\n",(0,i.jsx)(t.p,{children:"In practice, you may want to have multiple plugins that share the same implementation.\nFor example, you may want to have two plugins that both pull data from a database, but one pulls data from database A and the other pulls data from database B.\nIn this case, the plugin implementation code is the same, but the plugin configuration is different.\nIt would be cumbersome to copy and paste the same implementation code to two different files."}),"\n",(0,i.jsx)(t.p,{children:"To solve this problem, TaskWeaver allows you to have multiple plugin configurations that share the same implementation.\nHere is an example of the plugin configuration for the two plugins that pull data from database A and B respectively:"}),"\n",(0,i.jsx)(t.p,{children:"The configuration for the plugin that pulls data from database A:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:'name: sql_pull_data_from_A\ncode: sql_pull_data\n...\ndescription: >-\n  Pull data from a SQL database A. The database A contains information about merchandise sales.\nexamples: |-\n  df, description = sql_pull_data_from_A("pull data from time_series table")\nparameters:\n  ...\nreturns:\n  ...\nconfigurations:\n  ...\n  sqlite_db_path: /path/to/sqlite_A.db\n'})}),"\n",(0,i.jsx)(t.p,{children:"The configuration for the plugin that pulls data from database B:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:'name: sql_pull_data_from_B\ncode: sql_pull_data\n...\ndescription: >-\n  Pull data from a SQL database B. The database B contains information about customer information.\nexamples: |-\n  df, description = sql_pull_data_from_B("pull data from time_series table")\nparameters:\n  ...\nreturns:\n  ...\nconfigurations:\n  ...\n  sqlite_db_path: /path/to/sqlite_B.db\n'})}),"\n",(0,i.jsx)(t.p,{children:"Let's discuss the differences between the two configurations."}),"\n",(0,i.jsxs)(t.p,{children:["First, you can see that the ",(0,i.jsx)(t.code,{children:"name"})," field is different, and the names are different from the python file name (without extension) which is ",(0,i.jsx)(t.code,{children:"sql_pull_data.py"}),".\nThis name is used in CodeInterpreter for code generation. So, you can see that in the ",(0,i.jsx)(t.code,{children:"examples"})," field,\nthe function name is ",(0,i.jsx)(t.code,{children:"sql_pull_data_from_A"})," and ",(0,i.jsx)(t.code,{children:"sql_pull_data_from_B"}),", respectively."]}),"\n",(0,i.jsxs)(t.p,{children:["Second, you can see that the ",(0,i.jsx)(t.code,{children:"code"})," field is the same, and the code file name is ",(0,i.jsx)(t.code,{children:"sql_pull_data.py"}),".\nThis means that the two plugins share the same implementation code.\nThe ",(0,i.jsx)(t.code,{children:"code"})," field is optional, and if you don't specify it, the plugin name will be used as the code file name without the extension."]}),"\n",(0,i.jsxs)(t.p,{children:["Third, you can see that the ",(0,i.jsx)(t.code,{children:"configurations"})," field is different, and the ",(0,i.jsx)(t.code,{children:"sqlite_db_path"})," is different.\nThis means that the two plugins have different configurations.\nThis is typically the key reason why you want to have multiple plugin configurations that share the same implementation."]}),"\n",(0,i.jsxs)(t.p,{children:["Finally, you can see that the ",(0,i.jsx)(t.code,{children:"description"})," field is different, and the descriptions are different.\nThis is important because the Planner and the CodeInterpreter will use the description to make decisions and generate code.\nThe two descriptions should be explicit enough to distinguish the two plugins.\nOtherwise, the Planner and the CodeInterpreter may not be able to make the right decisions."]}),"\n",(0,i.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(t.p,{children:["When you meet the situation where you want to have multiple plugin configurations that share the same implementation,\nyou can use the ",(0,i.jsx)(t.code,{children:"code"})," field to specify the code file name, and use the ",(0,i.jsx)(t.code,{children:"configurations"})," field to specify the configurations.\nThe ",(0,i.jsx)(t.code,{children:"name"})," field is used to distinguish the plugins, and the ",(0,i.jsx)(t.code,{children:"description"})," field is used to\nhelp the Planner and the CodeInterpreter make right decisions."]})]})}function h(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>s});var i=n(7294);const a={},o=i.createContext(a);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);