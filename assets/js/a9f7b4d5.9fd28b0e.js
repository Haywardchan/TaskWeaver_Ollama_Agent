"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9822],{7548:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var t=o(5893),r=o(1151);const s={},i="Role",l={id:"concepts/role",title:"Role",description:"The role is a concept in TaskWeaver which represents the different roles in the conversation system.",source:"@site/docs/concepts/role.md",sourceDirName:"concepts",slug:"/concepts/role",permalink:"/TaskWeaver/docs/concepts/role",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/TaskWeaver/tree/main/website/docs/concepts/role.md",tags:[],version:"current",frontMatter:{},sidebar:"documentSidebar",previous:{title:"Attachment",permalink:"/TaskWeaver/docs/concepts/attachment"},next:{title:"Plugin",permalink:"/TaskWeaver/docs/concepts/plugin"}},c={},a=[];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"role",children:"Role"}),"\n",(0,t.jsx)(n.p,{children:"The role is a concept in TaskWeaver which represents the different roles in the conversation system.\nThe Planner and CodeInterpreter are two examples of roles in TaskWeaver."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Role:\n    @inject\n    def __init__(\n        self,\n        config: ModuleConfig,\n        logger: TelemetryLogger,\n        tracing: Tracing,\n        event_emitter: SessionEventEmitter,\n        role_entry: Optional[RoleEntry] = None,\n    ):\n        """\n        The base class for all roles.\n        """\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["We use the ",(0,t.jsx)(n.code,{children:"inject"})," decorator from the ",(0,t.jsx)(n.code,{children:"injector"})," package to inject the dependencies into the role class."]})}),"\n",(0,t.jsxs)(n.p,{children:["We allow adding extra roles into the system by inheriting the ",(0,t.jsx)(n.code,{children:"Role"})," class and implementing the role in\nthe ",(0,t.jsx)(n.code,{children:"taskweaver.ext_role"})," module. We have provided examples on how to implement a new role.\nA very simple example is the ",(0,t.jsx)(n.code,{children:"Echo"})," role which echoes the user's message back to the user."]}),"\n",(0,t.jsxs)(n.p,{children:["A role should have at least two files: ",(0,t.jsx)(n.code,{children:"role_name.py"})," and ",(0,t.jsx)(n.code,{children:"role_name.role.yaml"}),".\nThe files of the role should be put in the ",(0,t.jsx)(n.code,{children:"taskweaver/ext_role/role_name"})," folder.\nWe need to follow the convention of the role name, which is exactly the same as the folder name,\notherwise an exception will be raised.\nWe typically use the style of ",(0,t.jsx)(n.code,{children:"snake_case"})," for the role name."]}),"\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.code,{children:"role_name.role.yaml"})," file, we define the role's configuration.\nThis following is ",(0,t.jsx)(n.code,{children:"echo.role.yaml"})," of the ",(0,t.jsx)(n.code,{children:"Echo"})," role configuration."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"alias: Echo\nmodule: taskweaver.ext_role.echo.echo.Echo\nintro : |-\n  - Echo is responsible for echoing the user input.\n"})}),"\n",(0,t.jsx)(n.p,{children:"The configuration file contains the following fields:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"alias"}),": the alias of the role, which is the name of role shown in the prompt and the conversation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"module"}),": the module path of the role class. TaskWeaver will import the module and instantiate the role class."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"intro"}),": the introduction of the role, which will be shown in Planner's prompt for choosing the role for certain tasks."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.code,{children:"role_name.py"})," file, we define the role class. The following is ",(0,t.jsx)(n.code,{children:"echo.py"})," of the ",(0,t.jsx)(n.code,{children:"Echo"})," role class."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class EchoConfig(RoleConfig):\n    def _configure(self):\n        # configuration for the Echo role\n        # can be configured in the project configuration file with `echo.decorator`\n        self.decorator = self._get_str("decorator", "")\n\n\nclass Echo(Role):\n    @inject\n    def __init__(\n        self,\n        config: EchoConfig,\n        logger: TelemetryLogger,\n        tracing: Tracing,\n        event_emitter: SessionEventEmitter,\n        role_entry: RoleEntry,\n    ):\n        # configuration for the parent class; this is required\n        super().__init__(config, logger, tracing, event_emitter, role_entry)\n\n    def reply(self, memory: Memory, **kwargs) -> Post:\n        rounds = memory.get_role_rounds(\n            role=self.alias,\n            include_failure_rounds=False,\n        )\n\n        # obtain the query from the last round\n        last_post = rounds[-1].post_list[-1]\n\n        post_proxy = self.event_emitter.create_post_proxy(self.alias)\n\n        post_proxy.update_send_to(last_post.send_from)\n        post_proxy.update_message(\n            self.config.decorator +\n            last_post.message +\n            self.config.decorator\n        )\n\n        return post_proxy.end()\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The role implementation should inherit the ",(0,t.jsx)(n.code,{children:"Role"})," class and implement the ",(0,t.jsx)(n.code,{children:"reply"})," method.\nThe above example demonstrates how to get the query from the last round.\nThe ",(0,t.jsx)(n.code,{children:"reply"})," function of the Echo role is simply echoing the user's message back to the user with optional decoration.\nThe ",(0,t.jsx)(n.code,{children:"reply"})," function should return a ",(0,t.jsx)(n.code,{children:"Post"})," object, which is the response of the role to the user."]}),"\n",(0,t.jsxs)(n.p,{children:["We provide facilities to help the role to interact with the memory, the event emitter, and the logger.\nFor example, the ",(0,t.jsx)(n.code,{children:"event_emitter.create_post_proxy"})," function is used to create a ",(0,t.jsx)(n.code,{children:"PostProxy"})," object, which is a helper class to create a ",(0,t.jsx)(n.code,{children:"Post"})," object.\nThe ",(0,t.jsx)(n.code,{children:"PostProxy"})," object is used to update the ",(0,t.jsx)(n.code,{children:"Post"})," object with the new message, send_to, and other attributes.\nOnce the ",(0,t.jsx)(n.code,{children:"PostProxy"})," object is updated, the event emitter will send this event to a handler to display the event to a frontend."]}),"\n",(0,t.jsxs)(n.p,{children:["To enable the role in TaskWeaver, we need to add the role configuration to the ",(0,t.jsx)(n.code,{children:"taskweaver_config.json"})," file.\nThe following is an example of the ",(0,t.jsx)(n.code,{children:"taskweaver_config.json"})," file with the ",(0,t.jsx)(n.code,{children:"Echo"})," role configuration\nin addition to the ",(0,t.jsx)(n.code,{children:"Planner"})," and ",(0,t.jsx)(n.code,{children:"CodeInterpreter"})," roles. Note that the name of the role should be\nthe same as the folder name of the role, ",(0,t.jsx)(n.strong,{children:"not"})," the alias."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "session.roles": ["planner", "echo", "code_interpreter"]\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"How to determine if I should create a new role? or implement a new plugin for the CodeInterpreter?"}),"\nThe answer depends on the functionality you want to implement.\nIf the functionality is to reply in text message given a user query, and you don't envision the need to process the reply text in code,\nyou should create a new role.\nIn contrast, if the functionality is to process the user query and return the result in a structured format,\nor if both input and output are in a structured format, you should implement a new plugin for the CodeInterpreter."]})})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>l,a:()=>i});var t=o(7294);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);