"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5675],{2929:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>h});var s=n(5893),a=n(1151);const r={},o="Customizing Examples",i={id:"customization/example/example",title:"Customizing Examples",description:"There are currently two types of examples: (1) Planner examples and (2) CodeInterpreter examples.",source:"@site/docs/customization/example/example.md",sourceDirName:"customization/example",slug:"/customization/example/",permalink:"/TaskWeaver/docs/customization/example/",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/TaskWeaver/tree/main/website/docs/customization/example/example.md",tags:[],version:"current",frontMatter:{},sidebar:"documentSidebar",previous:{title:"Multiple YAML files to one Python implementation",permalink:"/TaskWeaver/docs/plugin/multi_yaml_single_impl"},next:{title:"Experience",permalink:"/TaskWeaver/docs/customization/experience"}},l={},h=[{value:"Planner Examples",id:"planner-examples",level:2},{value:"CodeInterpreter Examples",id:"codeinterpreter-examples",level:2}];function d(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"customizing-examples",children:"Customizing Examples"}),"\n",(0,s.jsx)(t.p,{children:"There are currently two types of examples: (1) Planner examples and (2) CodeInterpreter examples.\nPlanning examples are used to demonstrate how the Planner should plan for a specific query from the User.\nCode generation examples are used to help the CodeInterpreter generate code or orchestrate plugins to perform a specific task."}),"\n",(0,s.jsx)(t.p,{children:"Both types of examples are actually the conversation between a collection of roles, such as the User, the Planner, and the CodeInterpreter.\nEach conversation consists of one or more rounds, and each round has a User query and contains one or more posts.\nA post is a message sent from one role to another role, and it may contain some attachments."}),"\n",(0,s.jsx)(t.p,{children:"One example looks like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"enabled: True\nrounds:\n   - User_query: ping\n     state: created\n     post_list:\n     - message: ping\n       send_from: User\n       send_to: Planner\n       attachment_list: []\n     - message: pong\n       send_from: Planner\n       send_to: User\n       attachment_list: []\n"})}),"\n",(0,s.jsx)(t.p,{children:"We explicitly break all examples into the two types only to make it easier to understand and maintain.\nWhen the roles are initialized, each role will only read the examples of its type."}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsx)(t.p,{children:"All the text field in the examples such as the messages are in Markdown format."})}),"\n",(0,s.jsx)(t.h2,{id:"planner-examples",children:"Planner Examples"}),"\n",(0,s.jsx)(t.p,{children:"A planning example tells LLMs how to plan for a specific query from the User, talk to the CodeInterpreter,\nreceive the execution result from the CodeInterpreter, and summarize the execution result."}),"\n",(0,s.jsx)(t.p,{children:"The following is an example of a conversation between the User, the Planner, and the CodeInterpreter.\nOne of the purposes of this example is to teach the Planner on the annotation of the dependencies between the steps in the plan.\nAnother purpose is to teach the Planner to follow the right output format."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"enabled: True\nrounds:\n  - User_query: count the rows of /home/data.csv\n    state: created\n    post_list:\n      - message: count the rows of /home/data.csv\n        send_from: User\n        send_to: Planner\n        attachment_list:\n      - message: Please load the data file /home/data.csv and count the rows of the loaded data\n        send_from: Planner\n        send_to: CodeInterpreter\n        attachment_list:\n        - type: init_plan\n          content: |-\n            1. load the data file\n            2. count the rows of the loaded data <sequentially depends on 1>\n            3. report the result to the User <interactively depends on 2>\n        - type: plan\n          content: |-\n            1. instruct CodeInterpreter to load the data file and count the rows of the loaded data\n            2. report the result to the User\n        - type: current_plan_step\n          content: 1. instruct CodeInterpreter to load the data file and count the rows of the loaded data\n      - message: Load the data file /home/data.csv successfully and there are 100 rows in the data file\n        send_from: CodeInterpreter\n        send_to: Planner\n        attachment_list:\n      - message: The data file /home/data.csv is loaded and there are 100 rows in the data file\n        send_from: Planner\n        send_to: User\n        attachment_list:\n          - type: init_plan\n            content: |-\n              1. load the data file\n              2. count the rows of the loaded data <sequentially depends on 1>\n              3. report the result to the User <interactively depends on 2>\n          - type: plan\n            content: |-\n              1. instruct CodeInterpreter to load the data file and count the rows of the loaded data\n              2. report the result to the User\n          - type: current_plan_step\n            content: 2. report the result to the User\n"})}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["To better understand the attachments including ",(0,s.jsx)(t.code,{children:"init_plan"}),", ",(0,s.jsx)(t.code,{children:"plan"}),", and ",(0,s.jsx)(t.code,{children:"current_plan_step"}),",",(0,s.jsx)(t.br,{}),"\n","please refer to the ",(0,s.jsx)(t.a,{href:"https://github.com/microsoft/TaskWeaver/blob/main/taskweaver/planner/planner_prompt.yaml",children:"Planner's prompt"}),"."]})}),"\n",(0,s.jsx)(t.p,{children:"In this example, there are 4 posts:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:'The first post is sent from the User to the Planner.\nThe message is "count the rows of /home/data.csv", which must be the same with the User query.'}),"\n",(0,s.jsxs)(t.li,{children:['The second post is sent from the Planner to the CodeInterpreter.\nThe message is "Please load the data file /home/data.csv and count the rows of the loaded data".\nThe attachment list contains 3 attachments:',"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"The first attachment is the initial plan."}),"\n",(0,s.jsx)(t.li,{children:"The second attachment is the final plan."}),"\n",(0,s.jsx)(t.li,{children:"The third attachment is the current plan step."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:'The third post is sent from the CodeInterpreter to the Planner.\nThe message is "Load the data file /home/data.csv successfully and there are 100 rows in the data file".'}),"\n",(0,s.jsx)(t.li,{children:'The fourth post is sent from the Planner to the User.\nThe message is "The data file /home/data.csv is loaded and there are 100 rows in the data file".\nThe attachment list contains 3 attachments, which are the same as the second post.'}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"codeinterpreter-examples",children:"CodeInterpreter Examples"}),"\n",(0,s.jsx)(t.p,{children:"A CodeInterpreter example tells CodeInterpreter how to generate code or orchestrate plugins to perform a specific task.\nThe task is always from the Planner."}),"\n",(0,s.jsx)(t.p,{children:"The purpose of this example is to teach CodeInterpreter how to handle errors in execution."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'enabled: True\nrounds:\n  - User_query: read file /abc/def.txt\n    state: finished\n    post_list:\n      - message: read file /abc/def.txt\n        send_from: Planner\n        send_to: CodeInterpreter\n        attachment_list: []\n      - message: I\'m sorry, I cannot find the file /abc/def.txt. An FileNotFoundException has been raised.\n        send_from: CodeInterpreter\n        send_to: Planner\n        attachment_list:\n        - type: thought\n          content: "{ROLE_NAME} will generate a code snippet to read the file /abc/def.txt and present the content to the User."\n        - type: python\n          content: |-\n            file_path = "/abc/def.txt"  \n\n            with open(file_path, "r") as file:  \n                file_contents = file.read()  \n                print(file_contents)\n        - type: verification\n          content: CORRECT\n        - type: code_error\n          content: No code error.\n        - type: execution_status\n          content: FAILURE\n        - type: execution_result\n          content: FileNotFoundException, the file /abc/def.txt does not exist.\n'})}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["Read the prompt of the code generation to better understand the attachments in the example\n",(0,s.jsx)(t.a,{href:"https://github.com/microsoft/TaskWeaver/blob/main/taskweaver/code_interpreter/code_interpreter/code_generator_prompt.yaml",children:"code generator prompt"}),"."]})}),"\n",(0,s.jsx)(t.p,{children:"This conversation has two posts:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:'The first post is sent from the Planner to the CodeInterpreter.\nThe message is "Please read file /abc/def.txt".'}),"\n",(0,s.jsxs)(t.li,{children:['The second post is sent from the CodeInterpreter to the Planner.\nThe message is "read file /abc/def.txt".\nThe attachment list contains 6 attachments:',"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"The first attachment is the thought of the CodeInterpreter."}),"\n",(0,s.jsx)(t.li,{children:"The second attachment is the generated code, which is in python."}),"\n",(0,s.jsx)(t.li,{children:"The third attachment is the verification status, which is CORRECT, INCORRECT, or NONE."}),"\n",(0,s.jsx)(t.li,{children:"The fourth attachment is the verification error message."}),"\n",(0,s.jsx)(t.li,{children:"The fifth attachment is the execution status, which is SUCCESS, FAILURE, or NONE."}),"\n",(0,s.jsx)(t.li,{children:"The sixth attachment is the execution result, which is a markdown string."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["In this example, ",(0,s.jsx)(t.code,{children:"verification"})," is about whether the generated code is correct or not.\nWe implemented a module to verify the generated code. If the code is syntactically incorrect,\nor the code violates the constraints, the verification status will be ",(0,s.jsx)(t.code,{children:"INCORRECT"}),"\nand some error messages will be returned.\nA verification of NONE means that the code has not been verified, which means verification has been turned off."]}),"\n",(0,s.jsxs)(t.p,{children:["In this example, ",(0,s.jsx)(t.code,{children:"execution_status"})," is about whether the generated code can be executed successfully or not.\nIf the execution is successful, the execution status will be ",(0,s.jsx)(t.code,{children:"SUCCESS"})," and the execution result will be returned.\nOtherwise, the execution status will be ",(0,s.jsx)(t.code,{children:"FAILURE"})," and some error messages will be returned.\nA execution_status of ",(0,s.jsx)(t.code,{children:"NONE"})," means that the code has not been executed."]})]})}function c(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>o});var s=n(7294);const a={},r=s.createContext(a);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);