"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2802],{5590:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>_,metadata:()=>a,toc:()=>s});var i=t(5893),r=t(1151);const _={id:"develop_plugin",description:"How to develop a new plugin",slug:"/plugin/how_to_develop_a_new_plugin"},o="An Example of Developing a New Plugin",a={id:"customization/plugin/develop_plugin",title:"An Example of Developing a New Plugin",description:"How to develop a new plugin",source:"@site/docs/customization/plugin/how_to_develop_a_new_plugin.md",sourceDirName:"customization/plugin",slug:"/plugin/how_to_develop_a_new_plugin",permalink:"/TaskWeaver/docs/plugin/how_to_develop_a_new_plugin",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/TaskWeaver/tree/main/website/docs/customization/plugin/how_to_develop_a_new_plugin.md",tags:[],version:"current",frontMatter:{id:"develop_plugin",description:"How to develop a new plugin",slug:"/plugin/how_to_develop_a_new_plugin"},sidebar:"documentSidebar",previous:{title:"Plugin Introduction",permalink:"/TaskWeaver/docs/plugin/plugin_intro"},next:{title:"Multiple YAML files to one Python implementation",permalink:"/TaskWeaver/docs/plugin/multi_yaml_single_impl"}},l={},s=[{value:"Implement the python code",id:"implement-the-python-code",level:2},{value:"Configure the schema",id:"configure-the-schema",level:2},{value:"Call the plugin",id:"call-the-plugin",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"an-example-of-developing-a-new-plugin",children:"An Example of Developing a New Plugin"}),"\n",(0,i.jsx)(n.p,{children:"In this tutorial, we will introduce how to develop a strawman plugin in TaskWeaver. This plugin can render a input text in ascii art."}),"\n",(0,i.jsx)(n.h2,{id:"implement-the-python-code",children:"Implement the python code"}),"\n",(0,i.jsxs)(n.p,{children:["Create a python file named ",(0,i.jsx)(n.code,{children:"ascii_render.py"})," in the ",(0,i.jsx)(n.code,{children:"plugins"})," folder. The file name should be the same as the plugin name. The plugin name is defined in the plugin schema. In this example, the plugin name is ",(0,i.jsx)(n.code,{children:"ascii_render"}),".\nThe following code is the template of the plugin implementation."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from taskweaver.plugin import Plugin, register_plugin\n\n@register_plugin\nclass PluginTemplate(Plugin):\n    def __call__(self, *args, **kwargs):\n        """Implementation Starts"""\n        result, description = YourImplementation()\n        """Implementation Ends"""\n\n        # if your want to add artifact from the execution result, uncomment the following code\n        # self.ctx.add_artifact(\n        #     name="artifact",\n        #     file_name="artifact.csv",\n        #     type="df",\n        #     val=result,\n        # )\n        return result, description\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The typical way of implementing the plugin is to change the code between ",(0,i.jsx)(n.code,{children:"Implementation Starts"})," and ",(0,i.jsx)(n.code,{children:"Implementation Ends"}),". Note that the return are two variables ",(0,i.jsx)(n.em,{children:"result"})," and ",(0,i.jsx)(n.em,{children:"description"}),". The ",(0,i.jsx)(n.em,{children:"result"})," stores whatever output required for follow-up processing (e.g., a DataFrame). The ",(0,i.jsx)(n.em,{children:"description"})," is a string to describe the result."]}),"\n",(0,i.jsx)(n.p,{children:"Let's make some changes to the code and the result is as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from taskweaver.plugin import Plugin, register_plugin\n\n@register_plugin\nclass AsciiRenderPlugin(Plugin):\n    def __call__(self, text: str):\n        import pyfiglet\n        ascii_art_str = pyfiglet.figlet_format(text, font='isometric1')\n        return ascii_art_str\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that this function depends on the package ",(0,i.jsx)(n.code,{children:"pyfiglet"}),", so we need to install it with ",(0,i.jsx)(n.code,{children:"pip install pyfiglet"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"configure-the-schema",children:"Configure the schema"}),"\n",(0,i.jsxs)(n.p,{children:["Next, we need to configure the schema so that the LLM can understand the function\nof the plugin. In the schema, there are several fields that should be filled,\nincluding ",(0,i.jsx)(n.code,{children:"name"}),", ",(0,i.jsx)(n.code,{children:"enabled"}),", ",(0,i.jsx)(n.code,{children:"required"}),", ",(0,i.jsx)(n.code,{children:"description"}),", ",(0,i.jsx)(n.code,{children:"parameters"})," and ",(0,i.jsx)(n.code,{children:"returns"}),".\nPlease check ",(0,i.jsx)(n.a,{href:"https://microsoft.github.io/TaskWeaver/docs/plugin/plugin_intro",children:"Plugin Introduction"}),"\nfor more details.\nCreate a yaml file named ",(0,i.jsx)(n.code,{children:"ascii_render.yaml"})," and copy the following content into it."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"name: ascii_render\nenabled: true\nrequired: true\ndescription: >-\n  This plugin renders the input text into ASCII art form. \n  The input should be a string and the output is also a string in ASCII art.\n  For example, result = ascii_render(text='Hello World').\n\nparameters:\n  - name: text\n    type: str\n    required: true\n    description: >-\n      This is the input text to be rendered into ASCII art form.\n\nreturns:\n  - name: result\n    type: str\n    description: >-\n      The rendered text in ASCII art.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"call-the-plugin",children:"Call the plugin"}),"\n",(0,i.jsx)(n.p,{children:"After the plugin is implemented and configured, we can call the plugin in the conversation.\nThe full conversation is as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"=========================================================\n _____         _     _       __\n|_   _|_ _ ___| | _ | |     / /__  ____ __   _____  _____\n  | |/ _` / __| |/ /| | /| / / _ \\/ __ `/ | / / _ \\/ ___/\n  | | (_| \\__ \\   < | |/ |/ /  __/ /_/ /| |/ /  __/ /\n  |_|\\__,_|___/_|\\_\\|__/|__/\\___/\\__,_/ |___/\\___/_/\n=========================================================\nTaskWeaver: I am TaskWeaver, an AI assistant. To get started, could you please enter your request?\nHuman: render ABC in ascii art\n>>> [INIT_PLAN]\n1. Render the text 'ABC' into ASCII art\n>>> [PLAN]\n1. Instruct CodeInterpreter to render the text 'ABC' into ASCII art\n>>> [CURRENT_PLAN_STEP]\n1. Instruct CodeInterpreter to render the text 'ABC' into ASCII art\n>>> [SEND_TO]\nCodeInterpreter\n>>> [MESSAGE]\nPlease render the text 'ABC' into ASCII art\n>>> [PLANNER->CODEINTERPRETER]\nPlease render the text 'ABC' into ASCII art\n>>> [PYTHON]\n# Call the plugin function to render the text 'ABC' into ASCII art\nascii_art_result = ascii_render(\"ABC\")\nascii_art_result\n>>> [VERIFICATION]\nNONE\n>>> [STATUS]\nSUCCESS\n>>> [RESULT]\nThe execution of the generated python code above has succeeded\n\nThe result of above Python code after execution is:\n      ___           ___           ___     \n     /\\  \\         /\\  \\         /\\  \\    \n    /::\\  \\       /::\\  \\       /::\\  \\   \n   /:/\\:\\  \\     /:/\\:\\  \\     /:/\\:\\  \\  \n  /::\\~\\:\\  \\   /::\\~\\:\\__\\   /:/  \\:\\  \\ \n /:/\\:\\ \\:\\__\\ /:/\\:\\ \\:|__| /:/__/ \\:\\__\\\n \\/__\\:\\/:/  / \\:\\~\\:\\/:/  / \\:\\  \\  \\/__/\n      \\::/  /   \\:\\ \\::/  /   \\:\\  \\      \n      /:/  /     \\:\\/:/  /     \\:\\  \\     \n     /:/  /       \\::/__/       \\:\\__\\    \n     \\/__/         ~~            \\/__/    \n\n>>> [CODEINTERPRETER->PLANNER]\nThe following python code has been executed:\n\n# Call the plugin function to render the text 'ABC' into ASCII art\nascii_art_result = ascii_render(\"ABC\")\nascii_art_result\n\n\n\nThe execution of the generated python code above has succeeded\n\nThe result of above Python code after execution is:\n      ___           ___           ___     \n     /\\  \\         /\\  \\         /\\  \\    \n    /::\\  \\       /::\\  \\       /::\\  \\   \n   /:/\\:\\  \\     /:/\\:\\  \\     /:/\\:\\  \\  \n  /::\\~\\:\\  \\   /::\\~\\:\\__\\   /:/  \\:\\  \\ \n /:/\\:\\ \\:\\__\\ /:/\\:\\ \\:|__| /:/__/ \\:\\__\\\n \\/__\\:\\/:/  / \\:\\~\\:\\/:/  / \\:\\  \\  \\/__/\n      \\::/  /   \\:\\ \\::/  /   \\:\\  \\      \n      /:/  /     \\:\\/:/  /     \\:\\  \\     \n     /:/  /       \\::/__/       \\:\\__\\    \n     \\/__/         ~~            \\/__/    \n\n>>> [INIT_PLAN]  \n1. Render the text 'ABC' into ASCII art\n>>> [PLAN]\n1. Instruct CodeInterpreter to render the text 'ABC' into ASCII art\n>>> [CURRENT_PLAN_STEP]\nReport the ASCII art to the user\n>>> [SEND_TO]\nUser\n>>> [MESSAGE]\nHere is the text 'ABC' rendered in ASCII art:\n      ___           ___           ___     \n     /\\  \\         /\\  \\         /\\  \\    \n    /::\\  \\       /::\\  \\       /::\\  \\   \n   /:/\\:\\  \\     /:/\\:\\  \\     /:/\\:\\  \\  \n  /::\\~\\:\\  \\   /::\\~\\:\\__\\   /:/  \\:\\  \\ \n /:/\\:\\ \\:\\__\\ /:/\\:\\ \\:|__| /:/__/ \\:\\__\\\n \\/__\\:\\/:/  / \\:\\~\\:\\/:/  / \\:\\  \\  \\/__/\n      \\::/  /   \\:\\ \\::/  /   \\:\\  \\      \n      /:/  /     \\:\\/:/  /     \\:\\  \\     \n     /:/  /       \\::/__/       \\:\\__\\    \n     \\/__/         ~~            \\/__/    \n>>> [PLANNER->USER]\nHere is the text 'ABC' rendered in ASCII art:\n      ___           ___           ___     \n     /\\  \\         /\\  \\         /\\  \\    \n    /::\\  \\       /::\\  \\       /::\\  \\   \n   /:/\\:\\  \\     /:/\\:\\  \\     /:/\\:\\  \\  \n  /::\\~\\:\\  \\   /::\\~\\:\\__\\   /:/  \\:\\  \\ \n /:/\\:\\ \\:\\__\\ /:/\\:\\ \\:|__| /:/__/ \\:\\__\\\n \\/__\\:\\/:/  / \\:\\~\\:\\/:/  / \\:\\  \\  \\/__/\n      \\::/  /   \\:\\ \\::/  /   \\:\\  \\      \n      /:/  /     \\:\\/:/  /     \\:\\  \\     \n     /:/  /       \\::/__/       \\:\\__\\    \n     \\/__/         ~~            \\/__/    \nTaskWeaver: Here is the text 'ABC' rendered in ASCII art:\n      ___           ___           ___     \n     /\\  \\         /\\  \\         /\\  \\    \n    /::\\  \\       /::\\  \\       /::\\  \\   \n   /:/\\:\\  \\     /:/\\:\\  \\     /:/\\:\\  \\  \n  /::\\~\\:\\  \\   /::\\~\\:\\__\\   /:/  \\:\\  \\ \n /:/\\:\\ \\:\\__\\ /:/\\:\\ \\:|__| /:/__/ \\:\\__\\\n \\/__\\:\\/:/  / \\:\\~\\:\\/:/  / \\:\\  \\  \\/__/\n      \\::/  /   \\:\\ \\::/  /   \\:\\  \\      \n      /:/  /     \\:\\/:/  /     \\:\\  \\     \n     /:/  /       \\::/__/       \\:\\__\\    \n     \\/__/         ~~            \\/__/        \n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Check the ",(0,i.jsx)(n.a,{href:"/TaskWeaver/docs/FAQ",children:"FAQs"})," if you have any issues in developing a plugin before submitting an issue on GitHub."]})})]})}function c(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var i=t(7294);const r={},_=i.createContext(r);function o(e){const n=i.useContext(_);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(_.Provider,{value:n},e.children)}}}]);